{
  "Initialized": "event Initialized(uint8 version)",
  "SqrtPriceX96ShiftPercentUpdated": "event SqrtPriceX96ShiftPercentUpdated(uint256 low, uint256 up)",
  "MIN_AMOUNT_OUT": "uint256:MIN_AMOUNT_OUT",
  "PRECISION": "uint256:PRECISION",
  "decodeAndValidateReinitialize": "function decodeAndValidateReinitialize(bytes params) pure returns (bool)",
  "deposit": "function deposit(uint256 nativeAmount) returns (uint256 stakingAmount)",
  "depositConvertless": "function depositConvertless(uint256 stakingAmount, uint256 depositLiquidityAmount, uint256 feeLiquidityAmount, address feeRecipient, address residualsRecipient)",
  "dexVersion": "uint256:dexVersion",
  "emergencyWithdraw": "function emergencyWithdraw(uint256 stakingAmount, address recipient)",
  "farm": "address:farm",
  "getAmountOutRewardTokenToNative": "function getAmountOutRewardTokenToNative(address token, uint256 amountIn) returns (uint256 nativeAmount)",
  "getAmountOutStakingTokenToNative": "function getAmountOutStakingTokenToNative(uint256 amountIn) returns (uint256 nativeAmount)",
  "harvest": "uint256:harvest",
  "initializationVersion": "uint8:initializationVersion",
  "initialize": "function initialize(bytes params) returns (bool)",
  "liquidity": "function liquidity(address) view returns (uint256 liquidity_)",
  "native": "address:native",
  "oracleData": "function oracleData() view returns ((address oracle, uint256 deviation))",
  "pendingRewards": "function pendingRewards(address, address) view returns (uint256)",
  "pool": "address:pool",
  "reinitialize": "function reinitialize(bytes params) returns (bool)",
  "rewardTokenData": "function rewardTokenData() view returns ((string rewardTokenType, (address tokenIn, address tokenOut)[] swapsRewardTokenToNative, uint256 minRewardSwapAmount))",
  "rewardTokenType": "function rewardTokenType(address) view returns (string)",
  "rewardTokens": "function rewardTokens(uint256) view returns (address)",
  "rewardTokensCount": "uint256:rewardTokensCount",
  "sharePerTimeUnit": "function sharePerTimeUnit(address) view returns (uint256)",
  "stakingToken": "address:stakingToken",
  "stakingTokenApproveData": "function stakingTokenApproveData(address to, uint256 tokenId_) view returns (bytes data)",
  "stakingTokenData": "function stakingTokenData() view returns ((string stakingTokenType, address token0, address token1, uint24 fee, int24 tickLower, int24 tickUpper, (uint256 sqrtPriceX96LowInit, uint256 sqrtPriceX96UpInit, uint256 sqrtPriceX96LowLimit, uint256 sqrtPriceX96UpLimit, uint256 sqrtPriceX96ApproxPricePercent, uint256 sqrtPriceX96ShiftPercentLow, uint256 sqrtPriceX96ShiftPercentUp, uint256 sqrtPriceX96DefaultShiftPercentLow, uint256 sqrtPriceX96DefaultShiftPercentUp) pricesData, (address tokenIn, address tokenOut)[] swapsToken0ToNative, (address tokenIn, address tokenOut)[] swapsToken1ToNative, (address tokenIn, address tokenOut)[] swapsNativeToToken0, (address tokenIn, address tokenOut)[] swapsNativeToToken1))",
  "stakingTokenLiquidity": "function stakingTokenLiquidity(uint256 tokenId_) view returns (uint256 liquidity_)",
  "stakingTokenTransferFromData": "function stakingTokenTransferFromData(address from, address to, uint256 tokenId_) view returns (bytes data)",
  "stakingTokenType": "string:stakingTokenType",
  "timeUnit": "uint8:timeUnit",
  "tokenId": "uint256:tokenId",
  "universalRouter": "address:universalRouter",
  "updateSqrtPriceX96ShiftPercent": "function updateSqrtPriceX96ShiftPercent(uint256 lowPercent, uint256 upPercent) returns (bool)",
  "vault": "address:vault",
  "withdraw": "function withdraw(uint256 stakingAmount) returns (uint256 nativeAmount)",
  "withdrawConvertless": "function withdrawConvertless(uint256 stakingAmount, address recipient)",
  "pid": "uint256:pid"
}
